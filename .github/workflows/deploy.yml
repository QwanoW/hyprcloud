name: Deploy Laravel to VPS

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4 # Pinned to the latest major version

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0 # Pinned to the latest version
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Server
        run: |
          # The -T flag is crucial for non-interactive sessions.
          # We also add 'set -x' for verbose output, which helps in debugging.
          ssh -T -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -ex  # Exit on error AND print each command before executing

            echo "=== Starting deployment on $(hostname) ==="

            # Navigate to the project directory
            cd /var/www/hyprcloud

            echo "=== Pulling latest code from main branch ==="
            git pull origin main

            echo "=== Installing PHP dependencies with Composer ==="
            # Using --no-progress to reduce log noise
            composer install --no-dev --optimize-autoloader --no-interaction --no-progress

            echo "=== Installing Node dependencies and building assets ==="
            # Check for Bun first, then fall back to npm
            if command -v $HOME/.bun/bin/bun &> /dev/null; then
              echo "Using Bun for frontend build"
              $HOME/.bun/bin/bun install --frozen-lockfile # Use --frozen-lockfile in CI/CD
              $HOME/.bun/bin/bun run build
            elif command -v npm &> /dev/null; then
              echo "Using npm for frontend build"
              # Use 'ci' for faster, more reliable installs in CI environments
              npm ci
              npm run build
            else
              echo "Neither Bun nor npm found, skipping frontend build."
            fi

            echo "=== Running Laravel optimization commands ==="
            php artisan migrate --force
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan event:cache # Good to cache events as well

            # Check if storage link already exists before creating
            if [ ! -L "public/storage" ]; then
                echo "Creating storage link."
                php artisan storage:link
            else
                echo "Storage link already exists."
            fi

            echo "=== Restarting services ==="
            # Use sudo only for the command that needs it.
            # It's also good to check the PHP version on the server.
            sudo systemctl reload php8.4-fpm # Make sure this version is correct!
            
            # You might also want to restart Octane or Horizon if you use them
            # php artisan octane:reload
            # php artisan horizon:terminate

            echo "=== Deployment completed successfully ==="
          EOF